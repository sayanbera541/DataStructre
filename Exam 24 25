#include <stdio.h>
#include <stdlib.h>

void insert_at_anyPosition();
void display_node();

struct node 
{
    int data;
    struct node *next;
};

struct node *start = NULL;

int main()
{
    int choice;
    while(choice != 4)
    {
        printf("Press 1 to insert at any Position \n");
        printf("Press 2 to Display the node  \n");
        printf("Press 3 to exit \n");
        printf("\nEnter your choice: ");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1: insert_at_anyPosition();
                    break;
            case 2: display_node();
                    break;
            case 3: exit(0);
            default: printf("\nEnter valid choice!!\n");  
        }
    }
    return 0;
}

void insert_at_anyPosition()
{
    struct node *curr_node = NULL;
    struct node *temp_node = NULL;
    curr_node = start;
    int i, loc;
    printf("Enter the position you want to insert the node: \n");
    scanf("%d", &loc);
    if (start == NULL && loc != 1)
    {
        printf("List is empty\n");
        return;
    }
    
    for (i = 1; i < loc; i++)
    {
        if (curr_node == NULL)
        {
            printf("There is no element at position %d\n", loc);
            return;
        }
        else
        {
            temp_node = curr_node;
            curr_node = curr_node->next;
        }
    }
    
    struct node *new_node = (struct node *)malloc(sizeof(struct node));
    if (new_node == NULL)
    {
        printf("OVERFLOW\n");
        return;    
    }
    else
    {
        int item;
        printf("Enter the number you want to insert into the node: \n");
        scanf("%d", &item);
        new_node->data = item;
        new_node->next = curr_node;
        
        if (temp_node != NULL)
        {        
            temp_node->next = new_node;
        }
        else
        {
            
            start = new_node;    
        }

        printf("\nNew node inserted at position %d\n", loc);
    }        
}

void display_node()
{
    if (start == NULL)  
    {  
        printf("\nList is empty\n");  
    }  
    else   
    { 
        struct node *ptr = start;
        printf("Printing values...\n");  
        while (ptr != NULL) 
        {
            printf("%d \t", ptr->data);
            ptr = ptr->next;
        }    
    }
    printf("\n");
}


#include <stdio.h>
#define MAX 100

void push(int stack[], int *top, int value) 
{
    if (*top == MAX - 1)
	{
        printf("Stack overflow\n");
    } 
	else 
	{
        (*top)++;
        stack[*top] = value;
    }
}

void display(int stack[], int top)
 {
    if (top == -1) 
	{
        printf("Stack is empty\n");
    } 
	else 
	{
		int i;
        for (i = top; i >= 0; i--) 
		{
            printf("%d ", stack[i]);
        }
        printf("\n");
    }
}

int main() 
{
    int stack[MAX];
    int top = -1;

    int initialStack[] = {16, 68, 43, 6, 36};
    int initialSize = sizeof(initialStack) / sizeof(initialStack[0]);
    
    int i;
    for (i = 0; i < initialSize; i++)
	{
        push(stack, &top, initialStack[i]);
    }
    
    printf("Stack before pushing new value:\n");
    display(stack, top);
    
    int newValue;
    printf("Enter the new value to push into the stack: ");
    scanf("%d", &newValue);
    push(stack, &top, newValue);
    
    printf("Stack after pushing new value:\n");
    display(stack, top);

    return 0;
}



#include <stdio.h>
#define MAX 100

void enqueue(int queue[], int *rear, int value) 
{
    if (*rear == MAX - 1) 
	{
        printf("Queue overflow\n");
    } 
	else 
	{
        (*rear)++;
        queue[*rear] = value;
    }
}

void display(int queue[], int front, int rear) 
{
    if (front > rear) 
	{
        printf("Queue is empty\n");
    } 
	else 
	{
		int i;
        for (i = front; i <= rear; i++) 
		{
            printf("%d ", queue[i]);
        }
        printf("\n");
    }
}

int main() 
{
    int queue[MAX];
    int front = 0;
    int rear = -1;

    int initialQueue[] = {26, 54, 36, 86, 94};
    int initialSize = sizeof(initialQueue) / sizeof(initialQueue[0]);
	
	int i;
    for (i = 0; i < initialSize; i++) 
	{
        enqueue(queue, &rear, initialQueue[i]);
    }

    printf("Queue before enqueuing new value:\n");
    display(queue, front, rear);

    int newValue;
    printf("Enter the new value to enqueue into the queue: ");
    scanf("%d", &newValue);
    enqueue(queue, &rear, newValue);

    printf("Queue after enqueuing new value:\n");
    display(queue, front, rear);

    return 0;
}


#include <stdio.h>
void merge(int arr[], int left, int mid, int right) 
{
    int n1 = mid - left + 1;
    int n2 = right - mid;
    int L[n1], R[n2];
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2)
	 {
        if (L[i] <= R[j])
		{
            arr[k] = L[i];
            i++;
        } 
		else 
		{
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1) 
	{
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) 
	{
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int left, int right) 
{
    if (left < right) 
	{
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}
int main() 
{
    int n;
    printf("Enter the number of elements: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter %d elements: ", n);
    for (int i = 0; i < n; i++) 
	{
        scanf("%d", &arr[i]);
    }
    mergeSort(arr, 0, n - 1);

    printf("Sorted array: ");
    for (int i = 0; i < n; i++)
	{
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}



#include <stdio.h>
void swap(int* a, int* b) 
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int arr[], int low, int high) 
{
    int pivot = arr[high];
    int i = (low - 1);
	int j;
    for (j = low; j < high; j++) 
	{
        if (arr[j] <= pivot) 
		{
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quickSort(int arr[], int low, int high) 
{
    if (low < high)
	{
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() 
{
    int n;
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter %d elements: ", n);
    int i;
    for (i = 0; i < n; i++) 
	{
        scanf("%d", &arr[i]);
    }

    quickSort(arr, 0, n - 1);

    printf("Sorted array: ");
    for (i = 0; i < n; i++)
	{
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}


#include <stdio.h>
int binarySearch(int arr[], int left, int right, int x)
 {
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if 
		{
			(arr[mid] == x)
            return mid;
    	}
        if
		{   
			(arr[mid] < x)
            left = mid + 1;
        }

        else
            right = mid - 1;
    }
    return -1;
}

int main() {
    int n, x,i;
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter %d sorted elements: ", n);
    for (i = 0; i < n; i++)
	{
        scanf("%d", &arr[i]);
    }

    printf("Enter the element to search for: ");
    scanf("%d", &x);

    int result = binarySearch(arr, 0, n - 1, x);
    if (result != -1)
        printf("Element found at index %d\n", result);
    else
        printf("Element not found\n");

    return 0;
}



#include <stdio.h>
#include <stdlib.h>
struct Node 
{
    int data;
    struct Node* left;
    struct Node* right;
};

struct Node* createNode(int data) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

struct Node* insertNode(struct Node* root, int data)
 {
    if (root == NULL)
	{
        return createNode(data);
    }

    if (data < root->data)
	{

        root->left = insertNode(root->left, data);
    } 
	else if (data > root->data) 
	{
    
        root->right = insertNode(root->right, data);
    }

    return root;
}


void preorderTraversal(struct Node* root) 
{
    if (root != NULL) 
	{
        printf("%d ", root->data);         
        preorderTraversal(root->left);      
        preorderTraversal(root->right);     
    }
}

int main() 
{
    struct Node* root = NULL;
    int n,i, data;

    printf("Enter the number of elements: ");
    scanf("%d", &n);

    printf("Enter the elements: ");
    for (i = 0; i < n; i++) 
	{
        scanf("%d", &data);
        root = insertNode(root, data);
    }

    printf("Preorder traversal: ");
    preorderTraversal(root);
    printf("\n");

    return 0;
}



#include <stdio.h>
#include <stdlib.h>
struct Node 
{
    int data;
    struct Node* left;
    struct Node* right;
};

struct Node* createNode(int data) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

struct Node* insertNode(struct Node* root, int data) 
{
    if (root == NULL) 
	{
        return createNode(data);
    }

    if (data < root->data) 
	{
        root->left = insertNode(root->left, data);
    } 
	else if (data > root->data) 
	{
        root->right = insertNode(root->right, data);
    }

    return root;
}

void inorderTraversal(struct Node* root)
 {
    if (root != NULL) 
	{
        inorderTraversal(root->left);       
        printf("%d ", root->data);          
        inorderTraversal(root->right);      
    }
}

int main() 
{
    struct Node* root = NULL;
    int n,i,data;

    printf("Enter the number of elements: ");
    scanf("%d", &n);

    printf("Enter the elements: ");
    for (i = 0; i < n; i++) 
	{
        scanf("%d", &data);
        root = insertNode(root, data);
    }

    printf("Inorder traversal: ");
    inorderTraversal(root);
    printf("\n");

    return 0;
}



#include <stdio.h>
#include <stdlib.h>
#define MAX 100 

struct Queue 
{
    int front, rear, size;
    int array[MAX];
};

struct Queue* createQueue() 
{
    struct Queue* queue = (struct Queue*)malloc(sizeof(struct Queue));
    queue->front = queue->size = 0;
    queue->rear = MAX - 1;
    return queue;
}

int isFull(struct Queue* queue) 
{
    return (queue->size == MAX);
}

int isEmpty(struct Queue* queue) 
{
    return (queue->size == 0);
}

void enqueue(struct Queue* queue, int item) 
{
    if (isFull(queue)) 
	{
        printf("Queue overflow\n");
        return;
    }
    queue->rear = (queue->rear + 1) % MAX;
    queue->array[queue->rear] = item;
    queue->size = queue->size + 1;
    printf("%d enqueued to queue\n", item);
}

int dequeue(struct Queue* queue) 
{
    if (isEmpty(queue)) 
	{
        printf("Queue underflow\n");
        return -1;
    }
    int item = queue->array[queue->front];
    queue->front = (queue->front + 1) % MAX;
    queue->size = queue->size - 1;
    return item;
}

int front(struct Queue* queue) 
{
    if (isEmpty(queue))
        return -1;
    return queue->array[queue->front];
}

int rear(struct Queue* queue) 
{
    if (isFull(queue))
        return -1;
    return queue->array[queue->rear];
}

int main() 
{
    struct Queue* queue = createQueue();
    int choice, item;

    while(1) {
        printf("\nQueue Operations:\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Display Front\n");
        printf("4. Display Rear\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1:
                printf("Enter the element to enqueue: ");
                scanf("%d", &item);
                enqueue(queue, item);
                break;
            case 2:
                item = dequeue(queue);
                if (item != -1)
                    printf("%d dequeued from queue\n", item);
                break;
            case 3:
                item = front(queue);
                if (item != -1)
                    printf("Front item is %d\n", item);
                break;
            case 4:
                item = rear(queue);
                if (item != -1)
                    printf("Rear item is %d\n", item);
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }

    return 0;
}
